name: actions-pipup/find-repos
description: Find repos granted access to an application installation
inputs:
  github_app_id:
    description: Github App id
    required: true
  github_app_key:
    description: Github App secret key
    required: true
  repo_name:
    description: full name of a single repo to update
    required: false
    default: ''

outputs:
  repos:
    description: "JSON encoded list of repos"
    value: ${{ steps.set-repos.outputs.repos }}

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      shell: bash
      run: |
        pip install requests==2.28.2 pyjwt==2.6.0 cryptography==39.0.0

    - name: Find all repos
      id: set-repos
      shell: python
      run: |
        import base64
        import os
        import json
        import time
        from typing import Set
        
        import jwt
        import requests
        
        
        class GithubApp:
            _app_id: int
            _private_key: str
        
            def __init__(self, app_id: int, private_key: str) -> None:
                self._app_id = app_id
                self._private_key = private_key
        
            def _create_bearer_token(self) -> str:
                unix_now = int(time.time())
                return jwt.encode(
                    payload={
                        'iat': unix_now - 60,
                        'exp': unix_now + 600,
                        'iss': self._app_id
                    },
                    key=self._private_key,
                    algorithm='RS256'
                )
        
            def _get_access_token(self, installation_id: int) -> str:
                r = requests.post(
                    f'https://api.github.com/app/installations/{installation_id}/access_tokens',
                    headers={
                        'Authorization': f'Bearer {self._create_bearer_token()}',
                    },
                )
                return str(r.json()['token'])
        
            def get_repositories(self, installation_id: int) -> Set[str]:
                access_token = self._get_access_token(installation_id)
        
                results = []
                page = 0
                while True:
                    r = requests.get(
                        'https://api.github.com/installation/repositories',
                        headers={
                            'Authorization': f'token {access_token}',
                            'Accept': 'application/vnd.github+json',
                        },
                        params={
                            'page': page,
                            'per_page': 100,
                        }
                    )
                    r.raise_for_status()
        
                    results.extend(r.json()['repositories'])
        
                    if 'rel="next"' not in r.headers.get('Link', ''):
                        break
                    page += 1
        
                return {result['full_name'] for result in results}
        
            def get_installations(self) -> Set[int]:
                results = []
                page = 0
                while True:
                    r = requests.get(
                        'https://api.github.com/app/installations',
                        headers={
                            'Authorization': f'Bearer {self._create_bearer_token()}',
                            'Accept': 'application/vnd.github+json',
                        },
                        params={
                            'page': page,
                            'per_page': 100,
                        }
                    )
                    r.raise_for_status()
                    results.extend(r.json())
        
                    if 'rel="next"' not in r.headers.get('Link', ''):
                        break
                    page += 1
        
                return {result['id'] for result in results}

        github_app = GithubApp('${{ inputs.github_app_id }}', base64.b64decode('${{ inputs.github_app_key }}').decode('utf-8'))
        all_repos = [
            repo.lower()
            for installation_id in github_app.get_installations()
            for repo in github_app.get_repositories(installation_id)
        ]
    
        # Optionally filter down to a target repo
        if '${{ inputs.repo_name }}' != '':
            if '${{ inputs.repo_name }}'.lower() not in all_repos:
                raise ValueError('Unknown repo: ${{ inputs.repo_name }}')
            all_repos = ['${{ inputs.repo_name }}'.lower()]
    
        with open(os.environ['GITHUB_OUTPUT'], 'w+') as fh:
          fh.write(f'repos={json.dumps(all_repos)}\n')
